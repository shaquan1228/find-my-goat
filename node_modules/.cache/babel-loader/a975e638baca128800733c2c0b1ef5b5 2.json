{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport default function useLocalStorage(key, initialValue) {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"Sqa3F6gDATHpFHwlf7V4RmM1J0w=\");","map":{"version":3,"sources":["/Users/davidguadalupe/Desktop/Programming /FindMyGoat/find-my-goat/src/services/hooks/useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AAAA;;AACvD;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,MAAM;AACjD,QAAI;AACA;AACA,YAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb,CAFA,CAGA;;AACA,aAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;AACH,KALD,CAKE,OAAOS,KAAP,EAAc;AACZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOT,YAAP;AACH;AACJ,GAX6C,CAA9C,CAHuD,CAevD;AACA;;AACA,QAAMY,QAAQ,GAAIC,KAAD,IAAW;AACxB,QAAI;AACA;AACA,YAAMC,YAAY,GACdD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACZ,WAAD,CAAjC,GAAiDY,KADrD,CAFA,CAIA;;AACAX,MAAAA,cAAc,CAACY,YAAD,CAAd,CALA,CAMA;;AACAV,MAAAA,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4BjB,GAA5B,EAAiCQ,IAAI,CAACU,SAAL,CAAeH,YAAf,CAAjC;AACH,KARD,CAQE,OAAOL,KAAP,EAAc;AACZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAbD;;AAcA,SAAO,CAACR,WAAD,EAAcW,QAAd,CAAP;AACH;;GAhCuBd,e","sourcesContent":["import { useState } from \"react\";\n\nexport default function useLocalStorage(key, initialValue) {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n        try {\n            // Get from local storage by key\n            const item = window.localStorage.getItem(key);\n            // Parse stored json or if none return initialValue\n            return item ? JSON.parse(item) : initialValue;\n        } catch (error) {\n            // If error also return initialValue\n            console.log(error);\n            return initialValue;\n        }\n    });\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = (value) => {\n        try {\n            // Allow value to be a function so we have same API as useState\n            const valueToStore =\n                value instanceof Function ? value(storedValue) : value;\n            // Save state\n            setStoredValue(valueToStore);\n            // Save to local storage\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        } catch (error) {\n            // A more advanced implementation would handle the error case\n            console.log(error);\n        }\n    };\n    return [storedValue, setValue];\n}\n\n"]},"metadata":{},"sourceType":"module"}