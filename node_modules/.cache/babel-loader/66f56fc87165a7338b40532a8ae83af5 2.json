{"ast":null,"code":"// https://redux.js.org/introduction/getting-started\nimport { Form } from 'react-bootstrap';\nimport { createStore } from 'redux'; //TODO: Remove logoURL tester\n\nconst logoUrl = \"https://s3.getstickerpack.com/storage/uploads/sticker-pack/random-stickers-1/23.png?ef2e3aa79b8296988bd04a93c62c210c\";\nvar prevSessionInfo = {\n  sessionID: 0\n}; // const [loggedIn, setLoggedIn] = useLocalStorage('sessionInfoIsLoggedIn');\n// const [sessionID, setSessionID] = useLocalStorage('sessionInfoID');\n// const [username, setUsername] = useLocalStorage('sessionInfoUsername');\n// const [aviURL, setAviURL] = useLocalStorage('sessionInfoAviURL');\n// sessionID: setSessionInfo('sessionInfoID', 999),\n// username: setSessionInfo('sessionInfoUsername', 'testquan'),\n// aviURL: setSessionInfo('sessionInfoAviURL', 'https://pbs.twimg.com/media/Ds6GQkWUUAAyvy6.jpg')\n\ntry {\n  prevSessionInfo = {\n    loggedIn: localStorage.getItem('sessionInfoIsLoggedIn') === 'true',\n    //         sessionID: localStorage.getItem('sessionInfoID'),\n    username: localStorage.getItem('sessionInfoUsername'),\n    aviUrl: 'test' //         aviURL: localStorage.getItem('sessionInfoAviURL')\n\n  };\n} catch (err) {}\n\nfunction sessionInfoReducer(state = prevSessionInfo, action) {\n  switch (action.type) {\n    case 'log in':\n      return {\n        loggedIn: true,\n        username: action.payload.username,\n        aviURL: 'https://pbs.twimg.com/media/Ds6GQkWUUAAyvy6.jpg'\n      };\n\n    case 'log out':\n      return {\n        loggedIn: false,\n        username: '',\n        aviURL: null\n      };\n\n    default:\n      return state;\n  }\n}\n\nlet store = createStore(sessionInfoReducer); // You can use subscribe() to update the UI in response to state changes.\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it's helpful to subscribe as well.\n// store.subscribe(() => console.log(store.getState().sessionID))\n\nstore.subscribe(() => {\n  let state = store.getState();\n\n  if (state.loggedIn === true) {\n    localStorage.setItem('sessionInfoIsLoggedIn', state.loggedIn);\n    localStorage.setItem('sessionInfoUsername', state.username);\n  } else {\n    //This else is unneccesarry if i remove the if.\n    localStorage.removeItem('sessionInfoIsLoggedIn');\n    localStorage.removeItem('sessionInfoUsername');\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/davidguadalupe/Desktop/Programming /FindMyGoat/find-my-goat/src/config/store.js"],"names":["Form","createStore","logoUrl","prevSessionInfo","sessionID","loggedIn","localStorage","getItem","username","aviUrl","err","sessionInfoReducer","state","action","type","payload","aviURL","store","subscribe","getState","setItem","removeItem"],"mappings":"AAAA;AACA,SAASA,IAAT,QAAqB,iBAArB;AACA,SAASC,WAAT,QAA4B,OAA5B,C,CAEA;;AACA,MAAMC,OAAO,GAAG,sHAAhB;AAEA,IAAIC,eAAe,GAAG;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAtB,C,CAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,IAAI;AACAD,EAAAA,eAAe,GAAG;AACdE,IAAAA,QAAQ,EAAGC,YAAY,CAACC,OAAb,CAAqB,uBAArB,MAAkD,MAD/C;AAEd;AACAC,IAAAA,QAAQ,EAAEF,YAAY,CAACC,OAAb,CAAqB,qBAArB,CAHI;AAIdE,IAAAA,MAAM,EAAE,MAJM,CAKd;;AALc,GAAlB;AAOH,CARD,CASA,OAAOC,GAAP,EAAY,CAEX;;AAED,SAASC,kBAAT,CAA4BC,KAAK,GAAGT,eAApC,EAAqDU,MAArD,EAA6D;AACzD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,aAAO;AACHT,QAAAA,QAAQ,EAAE,IADP;AAEHG,QAAAA,QAAQ,EAAEK,MAAM,CAACE,OAAP,CAAeP,QAFtB;AAGHQ,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAKJ,SAAK,SAAL;AACI,aAAO;AACHX,QAAAA,QAAQ,EAAE,KADP;AAEHG,QAAAA,QAAQ,EAAE,EAFP;AAGHQ,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAMJ;AACI,aAAOJ,KAAP;AAfR;AAkBH;;AAED,IAAIK,KAAK,GAAGhB,WAAW,CAACU,kBAAD,CAAvB,C,CAEA;AACA;AACA;AACA;;AAEAM,KAAK,CAACC,SAAN,CAAgB,MAAM;AAClB,MAAIN,KAAK,GAAGK,KAAK,CAACE,QAAN,EAAZ;;AACA,MAAIP,KAAK,CAACP,QAAN,KAAmB,IAAvB,EAA6B;AACzBC,IAAAA,YAAY,CAACc,OAAb,CAAqB,uBAArB,EAA8CR,KAAK,CAACP,QAApD;AACAC,IAAAA,YAAY,CAACc,OAAb,CAAqB,qBAArB,EAA4CR,KAAK,CAACJ,QAAlD;AAEH,GAJD,MAKK;AAAE;AACHF,IAAAA,YAAY,CAACe,UAAb,CAAwB,uBAAxB;AACAf,IAAAA,YAAY,CAACe,UAAb,CAAwB,qBAAxB;AACH;AAGJ,CAbD;AAiBA,eAAeJ,KAAf","sourcesContent":["// https://redux.js.org/introduction/getting-started\nimport { Form } from 'react-bootstrap';\nimport { createStore } from 'redux';\n\n//TODO: Remove logoURL tester\nconst logoUrl = \"https://s3.getstickerpack.com/storage/uploads/sticker-pack/random-stickers-1/23.png?ef2e3aa79b8296988bd04a93c62c210c\"\n\nvar prevSessionInfo = { sessionID: 0 };\n\n\n// const [loggedIn, setLoggedIn] = useLocalStorage('sessionInfoIsLoggedIn');\n// const [sessionID, setSessionID] = useLocalStorage('sessionInfoID');\n// const [username, setUsername] = useLocalStorage('sessionInfoUsername');\n// const [aviURL, setAviURL] = useLocalStorage('sessionInfoAviURL');\n\n// sessionID: setSessionInfo('sessionInfoID', 999),\n// username: setSessionInfo('sessionInfoUsername', 'testquan'),\n// aviURL: setSessionInfo('sessionInfoAviURL', 'https://pbs.twimg.com/media/Ds6GQkWUUAAyvy6.jpg')\n\ntry {\n    prevSessionInfo = {\n        loggedIn: (localStorage.getItem('sessionInfoIsLoggedIn') === 'true'),\n        //         sessionID: localStorage.getItem('sessionInfoID'),\n        username: localStorage.getItem('sessionInfoUsername'),\n        aviUrl: 'test'\n        //         aviURL: localStorage.getItem('sessionInfoAviURL')\n    }\n}\ncatch (err) {\n\n}\n\nfunction sessionInfoReducer(state = prevSessionInfo, action) {\n    switch (action.type) {\n        case 'log in':\n            return {\n                loggedIn: true,\n                username: action.payload.username,\n                aviURL: 'https://pbs.twimg.com/media/Ds6GQkWUUAAyvy6.jpg'\n            }\n        case 'log out':\n            return {\n                loggedIn: false,\n                username: '',\n                aviURL: null\n\n            }\n        default:\n            return state\n    }\n\n}\n\nlet store = createStore(sessionInfoReducer);\n\n// You can use subscribe() to update the UI in response to state changes.\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it's helpful to subscribe as well.\n// store.subscribe(() => console.log(store.getState().sessionID))\n\nstore.subscribe(() => {\n    let state = store.getState()\n    if (state.loggedIn === true) {\n        localStorage.setItem('sessionInfoIsLoggedIn', state.loggedIn)\n        localStorage.setItem('sessionInfoUsername', state.username);\n\n    }\n    else { //This else is unneccesarry if i remove the if.\n        localStorage.removeItem('sessionInfoIsLoggedIn');\n        localStorage.removeItem('sessionInfoUsername');\n    }\n\n\n})\n\n\n\nexport default store;\n\n\n"]},"metadata":{},"sourceType":"module"}