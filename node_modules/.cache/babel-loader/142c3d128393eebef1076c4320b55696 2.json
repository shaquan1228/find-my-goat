{"ast":null,"code":"import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\nconst auth = getAuth();\n/**\n * Checks if username exists in the database.\n * If a user exists in the database, checks if \n * the password provided is a match.\n * @param {String} username \n * @param {String} password \n */\n\nfunction handleDatabaseLogin(email, password) {\n  let userInfo = {};\n  signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n    // Signed in \n    userInfo.email = userCredential.user; // ...\n  }).catch(error => {\n    alert(\"wrong\");\n    const errorCode = error.code;\n    const errorMessage = error.message;\n  });\n  return userInfo; // if (username === \"test\" && password === \"1\")\n  //     return 200;\n}\n/**\n * Checks if password and passwordConfirmation \n * are the same. If so, checks if the username \n * or email already exists in the database.\n * If not, creates a new user.\n * \n * @param {String} email \n * @param {String} username \n * @param {String} password \n * @param {String} passwordConfirmation \n * \n * @returns 0 in the case of an error, 200 if successful\n */\n\n\nfunction handleCreateDatabaseAccount(email, username, password, passwordConfirmation) {\n  //TODO:Should I check if pw and pwConf are the same here or in the business logic?\n  createUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n    // Signed in \n    const user = userCredential.user; // ...\n  }).catch(error => {\n    const errorCode = error.code;\n    const errorMessage = error.message; // ..\n  });\n}\n\nexport { handleDatabaseLogin, handleCreateDatabaseAccount };","map":{"version":3,"sources":["/Users/davidguadalupe/Desktop/Programming /FindMyGoat/find-my-goat/src/services/databases/userInfo.js"],"names":["getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","auth","handleDatabaseLogin","email","password","userInfo","then","userCredential","user","catch","error","alert","errorCode","code","errorMessage","message","handleCreateDatabaseAccount","username","passwordConfirmation"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,8BAAlB,EAAkDC,0BAAlD,QAAoF,eAApF;AAEA,MAAMC,IAAI,GAAGH,OAAO,EAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,mBAAT,CAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;AAC1C,MAAIC,QAAQ,GAAG,EAAf;AAIAL,EAAAA,0BAA0B,CAACC,IAAD,EAAOE,KAAP,EAAcC,QAAd,CAA1B,CACKE,IADL,CACWC,cAAD,IAAoB;AACtB;AACAF,IAAAA,QAAQ,CAACF,KAAT,GAAiBI,cAAc,CAACC,IAAhC,CAFsB,CAItB;AACH,GANL,EAOKC,KAPL,CAOYC,KAAD,IAAW;AACdC,IAAAA,KAAK,CAAC,OAAD,CAAL;AACA,UAAMC,SAAS,GAAGF,KAAK,CAACG,IAAxB;AACA,UAAMC,YAAY,GAAGJ,KAAK,CAACK,OAA3B;AACH,GAXL;AAaA,SAAOV,QAAP,CAlB0C,CAoB1C;AACA;AAEH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,2BAAT,CAAqCb,KAArC,EAA4Cc,QAA5C,EAAsDb,QAAtD,EAAgEc,oBAAhE,EAAsF;AAClF;AACAnB,EAAAA,8BAA8B,CAACE,IAAD,EAAOE,KAAP,EAAcC,QAAd,CAA9B,CACKE,IADL,CACWC,cAAD,IAAoB;AACtB;AACA,UAAMC,IAAI,GAAGD,cAAc,CAACC,IAA5B,CAFsB,CAGtB;AACH,GALL,EAMKC,KANL,CAMYC,KAAD,IAAW;AACd,UAAME,SAAS,GAAGF,KAAK,CAACG,IAAxB;AACA,UAAMC,YAAY,GAAGJ,KAAK,CAACK,OAA3B,CAFc,CAGd;AACH,GAVL;AAYH;;AAGD,SAASb,mBAAT,EAA8Bc,2BAA9B","sourcesContent":["import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\n\nconst auth = getAuth();\n/**\n * Checks if username exists in the database.\n * If a user exists in the database, checks if \n * the password provided is a match.\n * @param {String} username \n * @param {String} password \n */\nfunction handleDatabaseLogin(email, password) {\n    let userInfo = {\n\n    }\n\n    signInWithEmailAndPassword(auth, email, password)\n        .then((userCredential) => {\n            // Signed in \n            userInfo.email = userCredential.user;\n\n            // ...\n        })\n        .catch((error) => {\n            alert(\"wrong\")\n            const errorCode = error.code;\n            const errorMessage = error.message;\n        });\n\n    return userInfo;\n\n    // if (username === \"test\" && password === \"1\")\n    //     return 200;\n\n}\n/**\n * Checks if password and passwordConfirmation \n * are the same. If so, checks if the username \n * or email already exists in the database.\n * If not, creates a new user.\n * \n * @param {String} email \n * @param {String} username \n * @param {String} password \n * @param {String} passwordConfirmation \n * \n * @returns 0 in the case of an error, 200 if successful\n */\nfunction handleCreateDatabaseAccount(email, username, password, passwordConfirmation) {\n    //TODO:Should I check if pw and pwConf are the same here or in the business logic?\n    createUserWithEmailAndPassword(auth, email, password)\n        .then((userCredential) => {\n            // Signed in \n            const user = userCredential.user;\n            // ...\n        })\n        .catch((error) => {\n            const errorCode = error.code;\n            const errorMessage = error.message;\n            // ..\n        });\n\n}\n\n\nexport { handleDatabaseLogin, handleCreateDatabaseAccount };"]},"metadata":{},"sourceType":"module"}